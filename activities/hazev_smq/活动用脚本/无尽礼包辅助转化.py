def find_data_groups(line):
    """
    智能识别数据分组，处理可能的错位问题
    """
    # 按制表符分割，去除空字符串
    parts = line.split('\t')
    data = []
    for part in parts:
        part = part.strip()
        if part:
            data.append(int(part))

    return data


def align_and_group_data(data):
    """
    智能对齐数据并分组
    """
    if len(data) < 3:
        return []

    groups = []

    # 按每3个元素分组
    for i in range(0, len(data), 3):
        if i + 2 < len(data):
            groups.append([data[i], data[i + 1], data[i + 2]])

    # 如果最后有剩余数据不足3个，补齐为一组
    remaining = len(data) % 3
    if remaining > 0:
        last_group = data[-(remaining):]
        while len(last_group) < 3:
            last_group.append(0)
        groups.append(last_group)

    return groups


def process_line(line):
    """
    处理单行数据，纠正错位并移除第三段为0的组，用[0,0,0]补齐到4组
    """
    # 提取原始数据
    data = find_data_groups(line)

    # 智能对齐并分组
    groups = align_and_group_data(data)

    # 过滤掉第三段为0的组
    valid_groups = []
    for group in groups:
        if group[2] != 0:  # 第三段不为0的组保留
            valid_groups.append(group)

    # 确保每行至少保留一组
    if not valid_groups:
        # 找到最后一个不是 [0,0,0] 的组
        for group in reversed(groups):
            if group != [0, 0, 0]:
                valid_groups = [group]
                break
        # 如果所有组都是 [0,0,0]，保留最后一组
        if not valid_groups:
            valid_groups = [groups[-1]]

    # 补齐到4组，用[0,0,0]填充
    while len(valid_groups) < 4:
        valid_groups.append([0, 0, 0])

    # 如果超过4组，只取前4组
    if len(valid_groups) > 4:
        valid_groups = valid_groups[:4]

    return valid_groups


def format_output_line(groups):
    """
    格式化输出，保持与原始输入格式一致
    """
    formatted_groups = []
    for group in groups:
        group_str = f"{group[0]}\t{group[1]}\t{group[2]}"
        formatted_groups.append(group_str)

    return '\t\t\t'.join(formatted_groups)


# 测试数据
input_data = """
1	100100	25			1	100220	0			97	9700001	0			0	0	0
1	100100	0			1	100220	8			97	9700001	5			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201001	1
1	100100	725			1	100220	0			97	9700001	0			2	201003	1
1	100100	0			1	100220	10			97	9700001	15			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201002	1
1	100100	90			1	100220	0			97	9700001	0			2	201001	1
1	100100	1200			1	100220	154			97	9700001	20			0	0	0
1	100100	0			1	100220	8			97	9700001	0			2	201004	1
1	100100	100			1	100220	0			97	9700001	0			2	201003	1
1	100100	225			1	100220	0			97	9700001	25			0	0	0
1	100100	1700			1	100220	124			97	9700001	0			2	201003	1
1	100100	225			1	100220	0			97	9700001	30			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201001	1
1	100100	125			1	100220	19			97	9700001	0			0	0	0
1	100100	1200			1	100220	0			97	9700001	0			2	201004	1
1	100100	0			1	100220	20			97	9700001	35			0	0	0
1	100100	0			1	100220	26			97	9700001	0			2	201002	1
1	100100	265			1	100220	0			97	9700001	0			0	0	0
1	100100	2200			1	100220	208			97	9700001	0			0	0	0
1	100100	0			1	100220	0			97	9700001	35			2	201003	1
1	100100	175			1	100220	0			97	9700001	0			0	0	0
1	100100	0			1	100220	50			97	9700001	0			2	201002	1
1	100100	1900			1	100220	192			97	9700001	0			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201005	1
1	100100	200			1	100220	0			97	9700001	40			2	201002	1
1	100100	275			1	100220	48			97	9700001	0			0	0	0
1	100100	2900			1	100220	0			97	9700001	0			2	201004	1
1	100100	200			1	100220	0			97	9700001	40			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201003	1
1	100100	365			1	100220	48			97	9700001	0			0	0	0
1	100100	2300			1	100220	0			97	9700001	0			2	201005	1
1	100100	0			1	100220	48			97	9700001	45			0	0	0
1	100100	0			1	100220	40			97	9700001	0			2	201003	1
1	100100	425			1	100220	0			97	9700001	0			0	0	0
1	100100	3500			1	100220	352			97	9700001	0			2	201004	1
1	100100	0			1	100220	0			97	9700001	0			2	201002	1
1	100100	400			1	100220	0			97	9700001	45			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201003	1
1	100100	3100			1	100220	329			97	9700001	0			0	0	0
1	100100	0			1	100220	48			97	9700001	0			2	201004	1
1	100100	150			1	100220	0			97	9700001	50			0	0	0
1	100100	500			1	100220	0			97	9700001	0			0	0	0
1	100100	4200			1	100220	0			97	9700001	0			2	201005	1
1	100100	400			1	100220	0			97	9700001	0			2	201004	1
1	100100	0			1	100220	72			97	9700001	50			0	0	0
1	100100	0			1	100220	0			97	9700001	0			2	201003	1
1	100100	4200			1	100220	332			97	9700001	0			2	201005	1
1	100100	550			1	100220	0			97	9700001	0			2	201004	1
1	100100	325			1	100220	34			97	9700001	60			0	0	0
1	100100	0			1	100220	106			97	9700001	0			2	201003	1
1	100100	5000			1	100220	477			97	9700001	0			2	201005	1
1	100100	0			1	100220	0			97	9700001	0			2	201004	1
1	100100	365			1	100220	0			97	9700001	60			0	0	0
1	100100	0			1	100220	79			97	9700001	0			2	201003	1
1	100100	650			1	100220	0			97	9700001	0			0	0	0
1	100100	0			1	100220	92			97	9700001	0			0	0	0
"""

# 处理并输出数据
lines = input_data.strip().split('\n')
for line in lines:
    processed_groups = process_line(line)
    output = format_output_line(processed_groups)
    print(output)